---
import CompanyTitleTyped from "./ui/company-title-typed.astro";

const randomizePairs = (
  entities: string[],
  resources: string[],
  existingPairs: string[][]
): string[][] => {
  // create all pairs of entities and resources and randomize array
  // such that no two adjacent elements have the same entity or resource
  const pairs = [];
  for (const entity of entities) {
    for (const resource of resources) {
      pairs.push([entity, resource]);
    }
  }

  const banned = {
    entity: null as string | null,
    resource: null as string | null,
  };

  const randomizedPairs = [];

  let tries = 0;
  for (let i = 0; i < pairs.length; i++) {
    // pick a random pair from pairs that is not banned
    const pair = pairs[Math.floor(Math.random() * pairs.length)];
    if (pair[0] === banned.entity || pair[1] === banned.resource) {
      i--;
      tries++;
      if (tries < 10) {
        continue;
      }
    }
    banned.entity = pair[0];
    banned.resource = pair[1];
    tries = 0;
    randomizedPairs.push(pair);
  }

  // add existing pairs to randomizedPairs at random positions
  for (const existingPair of existingPairs) {
    const index = Math.floor(Math.random() * randomizedPairs.length);
    randomizedPairs.splice(index, 0, existingPair);
  }

  return randomizedPairs;
};

const entities = ["People", "AI Agents", "Machine Identities", "Servers"];
const resources = [
  "Networks 📡",
  "Clouds 🌩️",
  "VPN Resources 🔒",
  "Databases 💾",
  "Files 📁",
  "SSH 🔑",
  "APIs 🔗",
  "Kubernetes 🐳",
];
const pairs = [["People", "Physical Server Rooms 🚪️"]];
const entityResourcePairs = randomizePairs(entities, resources, pairs);
const usecases = entityResourcePairs.map(
  ([entity, resource]) => `${entity} using ${resource}`
);
---

<div
  class="flex flex-col items-center justify-center max-w-6xl md:justify-start md:items-start px-4 md:px-8"
>
  <h2 class="font-doto text-lg mb-2 text-gray-400">
    Universal Policy as Code for All Access Control: Entitlements, Network
    Access, and Data Flow.
  </h2>
  <h1 class="font-doto text-3xl mb-4 text-center md:text-left leading-12">
    <span data-notation="box" data-notation-color="#e62753" class="mx-2"
      >TrustD</span
    > defines and enforces access across <span
      data-notation="underline"
      data-notation-color="#e62753"
      data-notation-hover-color="#e62753">everything</span
    > — even <CompanyTitleTyped strings={usecases} />
  </h1>
  <h3
    class="font-doto text-lg mb-4 text-center md:text-left text-gray-500 max-w-4xl"
  >
    For orgs that need to replace tribal knowledge and brittle scripts with
    consistent, scalable access across people, agents, networks, and data.
  </h3>
</div>
